<?xml version="1.0" encoding="UTF-8"?>
<view xmlns="http://asyncode.com/View"
	xmlns:mg="http://asyncode.com/Mongo"
	xmlns:m="http://asyncode.com/Email"
	xmlns:u="http://asyncode.com/User"
	xmlns:h="http://asyncode.com/Headers"
	inherits="_settings_">

	<!-- 
	
	The purpose of this file is to process a request to create a new user. 
	This file is executed after user clicks on submit button at /register page or an API call.
	
	-->

	<!-- First we are defining four parameters that are passed here from registration form. All names must be the same as in the form at /register. -->
	<post>
		<param name="email" type="email"/>
		<param name="password" type="nonempty"/>
		<param name="r_password" type="nonempty"/>
		<param name="name" type="text"/>
	</post>
	
	<!-- This condition checks if the submitted password and its repeated version are the same. If not, runtime will raise an error and no commands will be executed. -->

	<condition name="passwdCheck">$.password is $.r_password</condition>
	
	<!-- This counts how many users with admin privileges are there in the database. -->

	<set name="admin" command="mg:count" mg:coll="users">
		{"role":"admin"}
	</set>
	
	<!-- 
	We use user components' register command to register a new user in the system. 
	u:data saves additional data to the user object - in this case his/her name.
	the condition checks if the logged user's role is 'admin' or if there is no admin registered. Either way it creates a user. If the user is not admin and an admin is already registered, command is silently ignored, leaving error code on $.userCreated.@error.
	-->

	<set name="userCreated"
		command="u:register"
		u:email="{$.email}"
		u:password="{$.password}"
		u:role="admin"
		u:data="{'name':$.name}"
		condition="$ss.role is 'admin' or not $.admin"
	/>
	
	<!-- 
	
	We need to inform the registered user that the account is created. This code sends an email to the user in the raw email mode.
	The condition checks if $.userCreated.@error mentioned exists. If yes, the system is not going to send an email.
	$.domainName is set up in _settings_.xml
	
	-->

	<node name="sendMail"
		command="m:send"
		m:To="{$.email}"
		m:Sender="register@{$.domainName}"
		m:From="register@{$.domainName}"
		m:Content-Type="text/html; charset=utf-8"
		m:MIME-Version="1.0"
		m:Subject="{$.domainName} - admin created!"
		condition="$.userCreated and not $.userCreated.@error">
		<![CDATA[<b>Hi, ]]>{$.name}<![CDATA[,</b>
		<h2>Congratulations! Your {$.domainName} administrator account has been created!</h2>

		<a href="http://]]>{$env.domain}<![CDATA[/users/admin/setPassword/]]>{$.key}<![CDATA[/">Click here to set your password and login.</a>

		<div style="background:#333; height:32px; width:100%; padding:16px;color:#fff;margin-top:64px;">
			<div style="padding-top:10px;float:left;">Powered by <a href="http://asyncode.com/">Asyncode</a></div> <div style="float:right;margin-right:64px;"><img src="http://asyncode.com/img/logo.png" height="32"/></div>
		</div>]]>
	</node>

	<!-- When all commands are executed, we need to redirect the user to the login page. -->

	<set name="redirect" command="h:redirect" h:location="/login" condition="not $.userCreated.@error"/>

</view>
